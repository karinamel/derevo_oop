#include "stdafx.h"
#include "BST.h"



BST::BST() {
	this->root = nullptr;
}

/*void BST::add(int data) {
	if (this->root == nullptr) {
		root = new Node(data);
	}
	else {
		Node *newNode = new Node(data);
		Node *temp = root;
		bool q = false;
		while (!q) {
			if (temp->getData() >= data) {
				if (temp->getLeft() == nullptr) {
					temp->setLeft(newNode);
					q = true;
				}
				temp = temp->getLeft();
			}
			else {
				if (temp->getRight() == nullptr) {
					temp->setRight(newNode);
					q = true;
				}
				temp = temp->getRight();
			}
		}
	}
}*/

/*void BST::creation2() {
	int k, data;
	cout << "enter k ";
	cin >> k;
	for (k; k != 0; k--) {
		cout << "enter value ";
		cin >> data;
		add(data);
	}
}*/

void BST::print(Node *root, int level) {
	if (root != nullptr)
	{
		this->print(root->getRight(), level + 1);
		for (int i = 0; i < level; i++)
		{
			cout << "   ";
		}
		cout << root->getData() << endl;
		this->print(root->getLeft(), level + 1);
	}
}

void BST::print_layers() {
	this->print(root, 0);
}
bool BST::find(Node *root, int element) {
	if (root == nullptr) {
		return false;
	}
	if (root->getData() == element) {
		return true;
	}
	else if (root->getData() > element) {
		find(root->getLeft(), element);
	}
	else {
		find(root->getRight(), element);
	}
}
bool BST::find_element(int element) {
	return this->find(root, element);
}

/*bool BST::find_element(int element) {
	if (this->root == nullptr) {
		return false;
	}
	else {
		Node *temp = root;
		while (temp != nullptr) {
			if (temp->getData() == element) {
				return true;
			}
			else if (temp->getData() > element) {
				temp = temp->getLeft();
			}
			else {
				temp = temp->getRight();
			}
		}
	}
	return false;
}*/

Node *BST::insert(Node *&root, int data) {
	if (root == nullptr) {
		root = new Node(data);
	}
	else if (root->getData() >= data) {
		Node *help = root->getLeft();
		root->setLeft(insert(help, data));
	}
	else {
		Node *help = root->getRight();
		root->setRight(insert(help, data));
	}
	return root;
}

void BST::creation() {
	int k, data;
	cout << "enter k ";
	cin >> k;
	for (k; k != 0; k--) {
		cout << "enter value ";
		cin >> data;
		this->insert(root, data);
	}
}

/*Node * BST::delete_(Node *root, int element) {
	if (root == nullptr) {
		return root;
	}
	else if (element < root->getData()) {
		Node *help = root->getLeft();
		help = delete_(root->getLeft(), element);
	}
	else if (element > root->getData()) {
		Node *help = root->getLeft();
		help = delete_(root->getRight(), element);
	}
	else {
		if (root->getLeft() == nullptr && root->getRight() == nullptr) {
			delete root;
			root = nullptr;
		}
		else if (root->getLeft() == nullptr) {
			Node *temp = root;
			root = root->getRight();
			delete temp;
		}
		else if (root->getRight() == nullptr) {
			Node *temp = root;
			root = root->getLeft();
			delete temp;
		}
		else {
			Node *rightchild = root->getRight();
			while (rightchild->getLeft()) {
				rightchild = rightchild->getLeft();
			}
			root->setData(rightchild->getData());
			Node *help = root->getRight();
			help = delete_(root->getRight(), rightchild->getData());
		}
	}
	return root;
}
void BST::Delete(int element) {
	this->delete_(root, element);
}*/